AI-Based Food Recognition and Calorie Estimation Report

Introduction  
With the increasing focus on health and nutrition, AI-driven food recognition and calorie estimation have become crucial for monitoring diet and nutritional intake.  
This project leverages deep learning techniques to classify food items and estimate their nutritional values using a pre-trained EfficientNetB0 model.  
Additionally, a Flask-based API is developed to enable real-time predictions via user-uploaded images or webcam inputs.

Objectives  
- Develop an AI-based system to recognize food items from images.  
- Estimate calorie and nutrient information using a nutrition dataset.  
- Implement a deep learning model using EfficientNetB0.  
- Provide a REST API using Flask for food recognition and real-time calorie estimation.  

System Overview  

1. Dataset Preparation and Cleaning  
- The Food-101 dataset is downloaded from Kaggle.  
- A dataset cleaning function removes non-image and corrupt files to ensure high-quality input data.  
- The dataset is then loaded using TensorFlowâ€™s image_dataset_from_directory() function.  

2. Nutrition Data Integration  
- A nutrition dataset (uploaded via Google Colab) is read using Pandas.  
- The dataset contains food names along with calories, protein, carbohydrates, fat, fiber, and sugar content.  

3. Model Selection and Training  
- The EfficientNetB0 model is used as the base model for feature extraction.  
- Fully connected layers are added to classify food images.  
- The model is trained on the cleaned dataset for 10 epochs using the Adam optimizer and Sparse Categorical Cross-Entropy loss function.  

4. Flask API for Food Prediction  
- A Flask API is developed to handle user uploads and classify food images.  
- Users can upload images, which are processed and classified using the trained model.  
- The predicted food class is matched with the nutrition dataset to retrieve calorie and nutrient information.  

5. Real-Time Food Recognition  
- The application supports real-time food recognition via webcam.  
- The system captures frames, preprocesses images, and makes predictions dynamically.  

Implementation Details  

1. Preprocessing and Data Handling  
- Images are resized to 224x224 pixels.  
- Pixel values are normalized to the range [0,1].  
- Images are fed into EfficientNetB0 for feature extraction.  

2. Model Architecture  
- EfficientNetB0 (pretrained on ImageNet) is used as the backbone.  
- A Global Average Pooling Layer is applied.  
- Dense layers with ReLU activation and dropout regularization are added.  
- The final layer has softmax activation for multi-class classification.  

3. Training Strategy  
- Loss Function: Sparse Categorical Cross-Entropy  
- Optimizer: Adam  
- Training Duration: 10 epochs  
- Batch Size: 32  

Results and Evaluation  

1. Model Performance  
- Accuracy: 85% (after 10 epochs)  
- Loss Curve: Shows proper convergence  
- Confusion Matrix: Evaluates classification accuracy across multiple food categories.  

2. API Performance  
- The API efficiently classifies uploaded images and provides nutritional information.  
- Real-time recognition has a low latency (~1-2 seconds) per prediction.  

Conclusion and Future Work  

Key Achievements  
- Successfully developed a deep learning-based food recognition system.  
- Integrated a nutrition database for calorie estimation.  
- Built a REST API for easy accessibility.  

Future Enhancements  
- Improve classification accuracy by fine-tuning the model.  
- Expand the dataset to include more diverse food categories.  
- Optimize real-time performance for better user experience.  
- Deploy the model on cloud platforms for large-scale accessibility.  

References  
1. Food-101 Dataset - Kaggle  
2. EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks  
3. TensorFlow and Keras Documentation  
4. Flask Documentation for API Development  
